from typing import List, Tuple, Optional, Dict, Set

from django.db import models
from django.db.models import F
from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ValidationError


# ---------------- Base Content ----------------
class BaseContent(models.Model):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–±—â–∏–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    title = models.CharField(max_length=255, db_index=True)
    counter = models.PositiveIntegerField(default=0, db_index=True)
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)

    class Meta:
        abstract = True
        ordering = ["-created_at"]

    def __str__(self):
        return self.title

    def increment_counter(self, by: int = 1):
        """–ê—Ç–æ–º–∞—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
        self.__class__.objects.filter(pk=self.pk).update(counter=F("counter") + by)


class Video(BaseContent):
    video_url = models.URLField()
    subtitles_url = models.URLField(blank=True, null=True)
    # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∫ Contents
    contents = GenericRelation("Contents", related_query_name="video")

    def __str__(self):
        return f"üé¨ {self.title}"


class Audio(BaseContent):
    transcript = models.TextField(blank=True, null=True)
    contents = GenericRelation("Contents", related_query_name="audio")

    def __str__(self):
        return f"üéß {self.title}"


class Text(BaseContent):
    body = models.TextField()
    contents = GenericRelation("Contents", related_query_name="text")

    def __str__(self):
        return f"üìù {self.title}"


# ---------------- Contents Manager ----------------
class ContentsManager(models.Manager):
    def get_queryset(self):
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å select_related('content_type') –¥–ª—è –ª—ë–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ content_type
        return super().get_queryset().select_related("content_type")

    def for_model(self, model_class):
        ct = ContentType.objects.get_for_model(model_class)
        return self.get_queryset().filter(content_type=ct)

    def for_object(self, obj):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Contents –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ None)."""
        ct = ContentType.objects.get_for_model(obj)
        return self.get_queryset().filter(content_type=ct, _object_id=obj.pk)

    def get_or_create_for_object(self, obj):
        ct = ContentType.objects.get_for_model(obj)
        return self.get_or_create(content_type=ct, _object_id=obj.pk)


# ---------------- Contents ----------------
class Contents(models.Model):
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Video/Audio/Text/...).
    –ó–¥–µ—Å—å –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ö—Ä–∞–Ω–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞,
    —á—Ç–æ–±—ã –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    content_type = models.ForeignKey(
        ContentType,
        on_delete=models.CASCADE,
        verbose_name="–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Video, Audio, Text –∏ –¥—Ä.)",
        db_index=True,
    )
    _object_id = models.PositiveIntegerField(
        db_column="object_id",
        verbose_name="ID –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        help_text="ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        db_index=True,
    )
    # GenericForeignKey –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
    content_object = GenericForeignKey("content_type", "_object_id")

    objects = ContentsManager()

    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–µ–Ω—Ç"
        verbose_name_plural = "–ö–æ–Ω—Ç–µ–Ω—Ç"
        # –û–±—ã—á–Ω–æ —É–¥–æ–±–Ω–æ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å-–æ–±—ë—Ä—Ç–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç:
        # constraints = [
        #     models.UniqueConstraint(
        #         fields=["content_type", "_object_id"], name="unique_content_object"
        #     )
        # ]
        indexes = [
            models.Index(fields=["content_type", "_object_id"]),
        ]

    def __str__(self):
        # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω, content_object –º–æ–∂–µ—Ç –±—ã—Ç—å None
        return str(self.content_object) if self.content_object is not None else f"Contents({self.content_type}, {self._object_id})"

    @property
    def object_id(self) -> int:
        return self._object_id

    @object_id.setter
    def object_id(self, value: int):
        if value <= 0:
            raise ValueError("object_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        self._object_id = value

    def clean(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ content_type —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å—É-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫—É BaseContent,
        –∏ —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º content_type.model_class() ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
        """
        if not self.content_type_id or not self._object_id:
            # –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –≤ save/DB)
            return

        model_class = self.content_type.model_class()
        if model_class is None:
            raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç BaseContent
        try:
            is_sub = issubclass(model_class, BaseContent)
        except TypeError:
            is_sub = False

        if not is_sub:
            raise ValidationError("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã, —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç BaseContent")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not model_class.objects.filter(pk=self._object_id).exists():
            raise ValidationError(f"–û–±—ä–µ–∫—Ç {model_class.__name__} —Å id={self._object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")


# ---------------- Page ----------------
class Page(models.Model):
    title = models.CharField(max_length=255, db_index=True)
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)

    class Meta:
        verbose_name = "–°—Ç—Ä–∞–Ω–∏—Ü–∞"
        verbose_name_plural = "–°—Ç—Ä–∞–Ω–∏—Ü—ã"
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["title"]),
        ]

    def __str__(self):
        return self.title

    # ---- –≤—ã–±–æ—Ä–∫–∏: ----
    def get_ordered_items(self) -> List["ContentOnPage"]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ContentOnPage, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ order.
        select_related('content__content_type') –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç FK –Ω–∞ Contents –∏ ContentType
        (—Å–∞–º content_object ‚Äî generic, –µ–≥–æ –Ω–∞–¥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ).
        """
        return list(self.content_items.select_related("content__content_type").order_by("order"))

    def get_ordered_contents(self) -> List[Optional[BaseContent]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º–∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç-–æ–±—ä–µ–∫—Ç–æ–≤ (Video/Audio/Text/...),
        —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞—è –∏—Ö –ø–∞–∫–µ—Ç–Ω–æ:

        - 1 –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ContentOnPage
        - N –∑–∞–ø—Ä–æ—Å–æ–≤, –≥–¥–µ N = —á–∏—Å–ª–æ *—Ä–∞–∑–Ω—ã—Ö* —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        items = self.get_ordered_items()
        if not items:
            return []

        # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ content_type_id -> —Å–ø–∏—Å–æ–∫ object_id
        ct_to_ids: Dict[int, Set[int]] = {}
        for item in items:
            ct_id = item.content.content_type_id
            ct_to_ids.setdefault(ct_id, set()).add(item.content.object_id)

        # –∑–∞–≥—Ä—É–∑–∏–º –æ–±—ä–µ–∫—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ –∏ —Å–æ–±–µ—Ä—ë–º –º–∞–ø—É (ct_id, pk) -> –æ–±—ä–µ–∫—Ç
        fetched: Dict[Tuple[int, int], BaseContent] = {}
        for ct_id, ids in ct_to_ids.items():
            try:
                ct = ContentType.objects.get(pk=ct_id)
            except ContentType.DoesNotExist:
                continue
            model_class = ct.model_class()
            if model_class is None:
                continue
            qs = model_class.objects.filter(pk__in=list(ids))
            for obj in qs:
                fetched[(ct_id, obj.pk)] = obj

        # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ—Ä—è–¥–∫–µ items
        results: List[Optional[BaseContent]] = []
        for item in items:
            key = (item.content.content_type_id, item.content.object_id)
            results.append(fetched.get(key))  # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–∏–ª–∏ ‚Äî –±—É–¥–µ—Ç None

        return results

    def get_ordered_contents_with_wrappers(self) -> List[Tuple["ContentOnPage", Optional[BaseContent]]]:
        """
        –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ ContentOnPage + —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        """
        items = self.get_ordered_items()
        contents = self.get_ordered_contents()
        return list(zip(items, contents))


# ---------------- ContentOnPage ----------------
class ContentOnPage(models.Model):
    """
    –°–≤—è–∑—É—é—â–∞—è –º–æ–¥–µ–ª—å: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Contents —Ä–∞–∑–º–µ—â—ë–Ω –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    –ü–æ–ª–µ `order` —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–∫–æ–º. –ü–æ–ª–µ `alias` –¥–∞—ë—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π slug/name.
    """
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name="content_items")
    content = models.ForeignKey(Contents, on_delete=models.CASCADE, related_name="page_items")
    order = models.PositiveIntegerField(default=0, db_index=True)

    # –ª–æ–∫–∞–ª—å–Ω—ã–π alias/slug –¥–ª—è —ç—Ç–æ–≥–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    alias = models.SlugField(max_length=150, blank=True, null=True, help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π alias –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

    class Meta:
        ordering = ["order"]
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        constraints = [
            # –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ë—Ä—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–ª—å–∑—è –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            models.UniqueConstraint(fields=["page", "content"], name="unique_page_content"),
            # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å alias –≤ —Ä–∞–º–∫–∞—Ö page
            # models.UniqueConstraint(fields=['page', 'alias'], name='unique_page_alias')
        ]
        indexes = [
            models.Index(fields=["page", "order"]),
        ]

    def __str__(self):
        return f"{self.page} ‚Üí {self.content}"

    def save(self, *args, **kwargs):
        # –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ order (–µ—Å–ª–∏ 0 ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ "append")
        if not self.pk and (self.order is None or self.order == 0):
            last = ContentOnPage.objects.filter(page=self.page).aggregate(models.Max("order"))["order__max"]
            self.order = (last or 0) + 1
        super().save(*args, **kwargs)
